{"version":3,"sources":["app.js","resources.js","attributes/ctrl.js","attributes/directive.js","config/constants.js","config/routes.js","dashboard/ctrl.js","directives/selectOnClick.js","edgevalues/directive.js","menu/ctrl.js","models/BaseModel.js","models/Category.js","models/Dimension.js","models/Fact.js","models/Ooi.js","models/Unit.js","resources/Attributes.js","resources/Categories.js","resources/DataTypes.js","resources/Dimensions.js","resources/Facts.js","resources/Init.js","resources/Items.js","resources/Oois.js","resources/Tasks.js","resources/Units.js","resources/Viewers.js","services/ItemConfig.js","services/Names.js","services/status.js","tasks/ctrl.js","viewers/ctrl.js","components/block/directive.js","components/item/directive.js","components/pageTitle/directive.js","components/textfield/directive.js","edgevalues/attributeRef/directive.js","edgevalues/externalId/directive.js","edgevalues/itemRef/directive.js","edgevalues/text/directive.js","edgevalues/url/directive.js","query/categories/directive.js","query/categories/filters.js","query/categories/match.js","tasks/task/directive.js","tasks/task-item/directive.js","viewers/item/directive.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var App = angular.module('nuata', [\n    'ngAnimate',\n    'ui.router',\n    'ngResource',\n    'angularMoment',\n    'ui.ace',\n    'ngMaterial',\n    'ui.bootstrap'\n]);\n\nApp.run(function ($rootScope) {\n    Array.prototype.equals = function (array) {\n        // if the other array is a falsy value, return\n        if (!array)\n            return false;\n\n        // compare lengths - can save a lot of time\n        if (this.length != array.length)\n            return false;\n\n        for (var i = 0, l=this.length; i < l; i++) {\n            // Check if we have nested arrays\n            if (this[i] instanceof Array && array[i] instanceof Array) {\n                // recurse into the nested arrays\n                if (!this[i].equals(array[i]))\n                    return false;\n            }\n            else if (this[i] != array[i]) {\n                // Warning - two different object instances will never be equal: {x:20} != {x:20}\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.maxBy = function (f) {\n        var curValue = Number.MIN_VALUE;\n        var curItem = null;\n        this.forEach(function (item) {\n            var v = f(item);\n            if(v > curValue) {\n                curItem = item;\n                curValue = v;\n            }\n        });\n        return { item: curItem, max: curValue };\n    };\n\n    Array.prototype.minBy = function (f) {\n        var curValue = Number.MAX_VALUE;\n        var curItem = null;\n        this.forEach(function (item) {\n            var v = f(item);\n            if(v < curValue) {\n                curItem = item;\n                curValue = v;\n            }\n        });\n        return { item: curItem, min: curValue };\n    };\n\n    Array.prototype.remove = function (item) {\n        var idx = this.indexOf(item);\n        if(idx != -1) {\n            this.splice(idx, 1);\n        }\n    };\n});\n\nApp.config(function ($httpProvider) {\n    $httpProvider.defaults.useXDomain = false;\n    //delete $httpProvider.defaults.headers.common['X-Requested-With'];\n});\n","App.factory('Nuata', function($resource, ServerUrl) {\n    return $resource(ServerUrl + '/', {}, {\n        search: {\n            method: 'POST',\n            url: ServerUrl + '/data'\n        }\n    });\n});\n","App.controller('AttributesCtrl', function ($scope, $stateParams, Attributes, DataTypes) {\n  \n  var resource = Attributes;\n  \n  $scope.languages = ['en', 'fr'];\n  $scope.curLang = 'en';\n\n  $scope.filter = {\n    name: '',\n    page: 1,\n    limit: 5,\n    valueType: '',\n    instanceOf: ''\n  };\n\n  $scope.pageChanged = function () {\n    $scope.getItems()\n  };\n\n  DataTypes.query().$promise.then(function(dataTypes) {\n    $scope.dataTypes = dataTypes;\n  });\n\n  $scope.getItems = function () {\n    resource.search($scope.filter).$promise.then(function (res) {\n      $scope.nbItems = res.nbItems;\n      $scope.items = res.items;\n    })\n  };\n\n  $scope.clipboard = new Clipboard('.itemId');\n\n  $scope.getItems();\n});\n","App.directive('attribute', function (Names) {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '='\n        },\n        link: function (scope) {\n            scope.curLang = 'en';\n            scope.langs = [];\n            scope.expanded = false;\n            scope.filterByInstance = function (instanceId) {\n                console.log(instanceId);\n            };\n\n            for (var lang in scope.item.labels) {\n                scope.langs.push(lang.trim());\n            }\n            scope.setLang = function (lang) {\n                scope.curLang = lang;\n            };\n            Names.getAttributeNames(scope.item.attributeIds, scope.curLang).then(function (names) {\n            });\n            Names.getItemNames(scope.item.instancesOf, scope.curLang).then(function (labels) {\n                scope.instancesOfNames = labels;\n            });\n            Names.getItemNames(scope.item.subclassesOf, scope.curLang).then(function (labels) {\n                scope.subclassesOfNames = labels;\n            });\n        },\n        templateUrl: 'app/attributes/attribute.html'\n    };\n});\n","\n//App.constant('ServerUrl', 'http://nuata.org:9000');\nApp.constant('ServerUrl', 'http://localhost:9000');","/**=========================================================\n * Module: config.js\n * App routes configuration\n =========================================================*/\n\nApp.config(['$stateProvider', '$locationProvider', '$urlRouterProvider',\n    function ($stateProvider, $locationProvider, $urlRouterProvider) {\n        'use strict';\n\n        // Set the following to true to enable the HTML5 Mode\n        // You may have to set <base> tag in index and a routing configuration in your server\n        //$locationProvider.html5Mode(true);\n\n        // default route\n        // $urlRouterProvider.otherwise('app/dashboard');\n        $urlRouterProvider.otherwise('app/items');\n\n        $stateProvider\n            .state('app', {\n                abstract: true,\n                url: '/app',\n                templateUrl: 'app/menu/view.html',\n                controller: 'MenuCtrl'\n            })\n            .state('app.dashboard', {\n                url: '/dashboard',\n                templateUrl: 'app/dashboard/view.html',\n                controller: 'DashboardCtrl'\n            })\n            .state('app.items', {\n                url: '/items',\n                templateUrl: 'app/items/view.html',\n                controller: 'ItemsCtrl',\n                params: { type: null }\n            })\n            .state('app.item', {\n                url: '/item',\n                templateUrl: 'app/item/view.html',\n                controller: 'ItemCtrl',\n                params: { id: null, type: null }\n            })\n            .state('app.attributes', {\n                url: '/attributes',\n                templateUrl: 'app/attributes/view.html',\n                controller: 'AttributesCtrl'\n            })\n            .state('app.viewers', {\n                url: '/viewers',\n                templateUrl: 'app/viewers/view.html',\n                controller: 'ViewersCtrl'\n            })\n            .state('app.tasks', {\n                url: '/tasks',\n                templateUrl: 'app/tasks/view.html',\n                controller: 'TasksCtrl',\n                params: {status: null}\n            })\n            .state('app.updates', {\n                url: '/updates',\n                templateUrl: 'app/updates/view.html',\n                controller: 'UpdateCtrl',\n                params: { name: null }\n            });\n    }]);","/**\n * Created by nico on 17/11/15.\n */\n/**\n * Created by nico on 17/11/15.\n */\nApp.controller('DashboardCtrl', function ($scope, $state) {\n  $state.go('app.items', {\n    name: 'Dimensions'\n  })\n});","App.directive('selectOnClick', ['$window', function ($window) {\n  return {\n    restrict: 'A',\n    link: function (scope, element, attrs) {\n      element.on('click', function () {\n        if (!$window.getSelection().toString()) {\n          // Required for mobile Safari\n          this.setSelectionRange(0, this.value.length)\n        }\n      });\n    }\n  };\n}]);\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('edgeValue', function(Names) {\n    return {\n        restrict: 'E',\n        scope: {\n            edge: '=',\n            valueType: '='\n        },\n        link: function(scope) {\n            Names.getAttributeNames([scope.edge.attributeId], 'en').then(function (names) {\n                scope.attributeName = names[scope.edge.attributeId];\n            })\n        },\n        templateUrl: 'app/edgevalues/view.html'\n    };\n});\n","/**\n * Created by nico on 17/11/15.\n */\nApp.controller('MenuCtrl', function ($scope, $state) {\n  \n  $scope.menu = [{\n    label: 'Dashboard',\n    icon: 'fa fa-bar-chart',\n    state: 'app.dashboard',\n    params: {},\n    children: []\n  },{\n    label: 'Attributes',\n    icon: 'fa fa-tags',\n    state: 'app.attributes'\n  },{\n    label: 'Viewers',\n    icon: 'fa fa-bullseye',\n    state: 'app.viewers',\n    children: [{\n      label: 'Add new',\n      icon: 'fa fa-bullseye',\n      state: 'app.viewers'\n    }]\n  },{\n    label: 'Tasks',\n    icon: 'fa fa-tags',\n    state: 'app.tasks',\n    params: {status: ''},\n    children: [{\n      label: 'Running',\n      state: 'app.tasks',\n      params: {status: 'running'}\n    },\n    {\n      label: 'Completed',\n      state: 'app.tasks',\n      params: {status: 'complete'}\n    },\n    {\n      label: 'Error',\n      state: 'app.tasks',\n      params: {status: 'error'}\n    },\n    {\n      label: 'Stopped',\n      state: 'app.tasks',\n      params: {status: 'stop'}\n    }]\n  }];\n\n  $scope.selectItem = function (item, childItem) {\n\n    $scope.menu.forEach(function (i) {\n      i.class = 'menu-item';\n    });\n    item.class = 'menu-item menu-item-selected';\n    $scope.curMenuItem = item;\n    if(childItem) {\n      $state.go(childItem.state, childItem.params)\n    } else {\n      $state.go(item.state, item.params)\n    }\n  };\n\n  $scope.selectItem($scope.menu[2]);\n\n  $scope.backgroundImageStyle = 'background: #233646';\n});","function BaseItem(allStatuses) {\n  this.allStatuses = allStatuses;\n  this.statuses = [];\n  this.statusesSet = {};\n}\nBaseItem.prototype.constructor = BaseItem;\n\nBaseItem.prototype.addStatus = function (status) {\n  if (!(status in this.statusesSet)) {\n    this.statusesSet[status] = true;\n    this.statuses.push(status);\n  }\n};\n\nBaseItem.prototype.removeStatus = function (status) {\n  if (status in this.statusesSet) {\n    delete this.statusesSet[status];\n    var idx = this.statuses.indexOf(status);\n    if (idx > -1) {\n      this.statuses.splice(idx, 1);\n    }\n  }\n};\n\nBaseItem.prototype.resolveDependencies = function () {\n  var hasMissingDependency = false;\n  var that = this;\n  this.dependencies.forEach(function (dependency) {\n    that[dependency.resolvedAs] = that[dependency.mapTo].map(function (item) {\n      if(!item._id) { hasMissingDependency = true; }\n      return item._id;\n    });\n  });\n  if(hasMissingDependency) {\n    this.addStatus(this.allStatuses.missingDependency)\n  }\n  return !hasMissingDependency;\n};\n\nBaseItem.prototype.resolveReferences = function (references) {\n  var that = this;\n  this.dependencies.forEach(function (dependency) {\n    if(that[dependency.field]) {\n      that[dependency.mapTo] = that[dependency.field].map(function (itemRef) {\n        var resolvedItem = itemRef;\n        var refs = dependency.mapTo === 'parents' ? references['dimensions'] : references[dependency.mapTo];\n        if (!itemRef in refs) {\n          that.addStatus(that.allStatuses.missingReference);\n        } else {\n          resolvedItem = refs[itemRef];\n        }\n        return resolvedItem;\n      })\n    }\n  });\n};\n\nBaseItem.prototype.getLang = function () {\n  if(this.names) {\n    return Object.keys(this.names);\n  } else { return []; }\n\n};\n\nBaseItem.prototype.isVisible = function (statuses) {\n  return true;\n  if('All' in statuses) {\n    return true;\n  } else if('None' in statuses) {\n    return false;\n  } else {\n    var found = false;\n    Object.keys(this.statuses).forEach( function(status) {\n      found = found || status.name in statuses.selectedStatuses;\n    });\n    return found;\n  }\n};\n\n//BaseItem.prototype.search = function () {\n//  var that = this;\n//  return new Promise( function(resolve, reject) {\n//    if(that.resolveDependencies()) {\n//      that.resource.search(that).$promise.then(function (res) {\n//        if (res.length === 1) {\n//          that._id = res[0]._id;\n//          that.addStatus(that.allStatuses.found);\n//        } else {\n//          that.resource.match(that).$promise.then(function (res) {\n//            if(res.length === 0) {\n//              that.addStatus(that.allStatuses.notFound);\n//            } else {\n//              that.addStatus(that.allStatuses.noExactMatch);\n//            }\n//            that.hits = res;\n//          });\n//        }\n//        resolve();\n//      })\n//    } else {\n//      resolve();\n//    }\n//  });\n//\n//};\n\n//BaseItem.prototype.index = function () {\n//  var that = this;\n//  return new Promise( function(resolve, reject) {\n//    if(that.resolveDependencies()) {\n//      that.resource.index(that).$promise.then(function (res) {\n//        that.addStatus(that.allStatuses.created);\n//        that._id = res._id;\n//        resolve();\n//      })\n//    } else {\n//      resolve();\n//    }\n//  });\n//};\n","\nApp.factory('Category', function(Status) {\n  function Category(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.dependencies = [];\n  }\n  Category.prototype = Object.create(BaseItem.prototype);\n\n  Category.prototype.constructor = Category;\n\n  Category.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Category(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Category.build = function (data) {\n    return new Category(data);\n  };\n\n  return Category\n});","\nApp.factory('Dimension', function(Status) {\n\n  function Dimension(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.categoryRefs = item.categories;\n    this.parentRefs = item.parents;\n\n    this.parents = [];\n    this.categories = [];\n\n    this.dependencies = [{\n      field: 'categoryRefs',\n      mapTo: 'categories',\n      resolvedAs: 'categoryIds'\n    },{\n      field: 'parentRefs',\n      mapTo: 'parents',\n      resolvedAs: 'parentIds'\n    }];\n  }\n\n  Dimension.prototype = Object.create(BaseItem.prototype);\n\n  Dimension.prototype.constructor = Dimension;\n\n  Dimension.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Dimension(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Dimension.build = function (data) {\n    return new Dimension(data);\n  };\n\n  return Dimension\n});\n\n","\nApp.factory('Fact', function(Status) {\n  function Fact(item) {\n    BaseItem.call(this, Status);\n    this.dependencies = [{\n      field: 'dimensionRefs',\n      mapTo: 'dimensions',\n      resolvedAs: 'dimensionIds'\n    },{\n      field: 'ooiRefs',\n      mapTo: 'oois',\n      resolvedAs: 'ooiIds'\n    }];\n    this.value = item.value;\n    this.valueInt = item.valueInt;\n    this.at = item.at;\n    this.dimensionRefs = item.dimensions;\n    this.ooiRefs = [item.ooi];\n  }\n  Fact.prototype = Object.create(BaseItem.prototype);\n\n  Fact.prototype.constructor = Fact;\n\n  Fact.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Fact(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Fact.build = function (data) {\n    return new Fact(data);\n  };\n\n  return Fact;\n});\n","App.factory('Ooi', function(Status) {\n  function Ooi(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.unitRefs = item.units;\n    this.ref = item.ref;\n    this.dependencies = [{\n      field: 'unitRefs',\n      mapTo: 'units',\n      resolvedAs: 'unitIds'\n    }];\n  }\n  Ooi.prototype = Object.create(BaseItem.prototype);\n\n  Ooi.prototype.constructor = Ooi;\n\n  Ooi.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Ooi(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Ooi.build = function (data) {\n    return new Ooi(data);\n  };\n\n  return Ooi\n});\n","\nApp.factory('Unit', function(Status) {\n  function Unit(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.dependencies = [];\n  }\n  Unit.prototype = Object.create(BaseItem.prototype);\n\n  Unit.prototype.constructor = Unit;\n\n  Unit.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Unit(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Unit.build = function (data) {\n    return new Unit(data);\n  };\n\n  return Unit;\n});\n","\nApp.factory('Attributes', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/attribute/index'\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/attribute/list',\n      isArray: true\n    },\n    get: {\n      method: 'GET',\n      url: ServerUrl + '/attribute/:id'\n    },\n    search: {\n      method: 'GET',\n      url: ServerUrl + '/attribute/search'\n    },\n    names: {\n      method: 'GET',\n      url: ServerUrl + '/attribute/name',\n      isArray: true\n    }\n  });\n});\n\n\n","\nApp.factory('Categories', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/category/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/category/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/category/match',\n      isArray: true\n    },\n    get: {\n      method: 'GET',\n      url: ServerUrl + '/category/:id'\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/category/search'\n    }\n  });\n});\n\n\n","\nApp.factory('DataTypes', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/datatypes');\n});\n\n\n","\nApp.factory('Dimensions', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Facts', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/fact/index'\n    }\n  });\n});\n\n\n","\nApp.factory('Init', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    init: {\n      method: 'POST',\n      url: ServerUrl + '/init'\n    }\n  });\n});\n\n\n","\nApp.factory('Items', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/item/index'\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/item/list',\n      isArray: true\n    },\n    get: {\n      method: 'GET',\n      url: ServerUrl + '/item/:id'\n    },\n    search: {\n      method: 'GET',\n      url: ServerUrl + '/item/search'\n    },\n    names: {\n      method: 'GET',\n      url: ServerUrl + '/item/name',\n      isArray: true\n    }\n  });\n});\n\n\n","\nApp.factory('Oois', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Tasks', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/task', {}, {\n    statuses: {\n      method: 'GET',\n      url: ServerUrl + '/task/statuses',\n      isArray: true\n    },\n    list: {\n      method: 'GET',\n      url: ServerUrl + '/task/names',\n      isArray: true\n    },\n    run: {\n      method: 'POST',\n      url: ServerUrl + '/task/run/:taskName'\n    },\n    stop: {\n      method: 'POST',\n      url: ServerUrl + '/task/stop/:id'\n    },\n    state: {\n      method: 'GET',\n      url: ServerUrl + '/task/state'\n    }\n  });\n});\n\n\n","\nApp.factory('Units', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/unit/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/unit/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/unit/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Viewers', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/viewer', {}, {\n    update: {\n      method: 'PUT',\n      url: ServerUrl + '/viewer/:id'\n    },\n    delete: {\n      method: 'DELETE',\n      url: ServerUrl + '/viewer/:id'\n    },\n    get: {\n      method: 'GET',\n      url: ServerUrl + '/viewer/',\n      cache: false\n    }\n  })\n});\n\n\n","\nApp.factory('ItemConfig', function(Dimensions, Categories, Units, Oois) {\n  return {\n    dimension: {\n      resource: Dimensions,\n      singular: 'Dimension',\n      plural: 'Dimensions',\n      dependencies: [{\n        type: 'category',\n        field: 'categoryIds',\n        label: 'Category'\n      }, {\n        type: 'dimension',\n        field: 'parentIds',\n        label: 'Parent'\n      }]\n    },\n    category: {\n      resource: Categories,\n      singular: 'Category',\n      plural: 'Categories',\n      mappings: {\n        field: 'categoryIds',\n        mapTo: 'categories'\n      }\n    },\n    unit: {\n      resource: Units,\n      singular: 'Unit',\n      plural: 'Units',\n      mappings: {\n        field: 'unitIds',\n        mapTo: 'units'\n      }\n    },\n    ooi: {\n      resource: Oois,\n      singular: 'Object of interest',\n      plural: 'Objects of interest',\n      mappings: {}\n    }\n  }\n});","\nApp.factory('Names', function(Attributes, Items) {\n  return {\n    cache: {\n      attribute: {},\n      item: {}\n    },\n    getAttributeNames: function(ids, lang) {\n      return this.getNames(ids, 'attribute', lang);\n    },\n    getItemNames: function(ids, lang) {\n      return this.getNames(ids, 'item', lang);\n    },\n    getNames: function(ids, type, lang) {\n      var that = this;\n      var typeCache = that.cache[type];\n      var repository = type == 'attribute' ? Attributes : Items;\n      var idsToSearch = [];\n      var idToLabel = {};\n\n      ids.forEach(function(id) {\n        if(id in typeCache && lang in typeCache[id]) {\n          idToLabel[id] = typeCache[id][lang]\n        } else {\n          idsToSearch.push(id)\n        }\n      });\n\n      return new Promise( function(resolve) {\n        if(idsToSearch.length === 0) {\n          resolve(idToLabel)\n        } else {\n          repository.names({id: idsToSearch}).$promise.then(function(labels) {\n            labels.forEach(function(label, i) {\n              var id = idsToSearch[i];\n              if(!(id in typeCache)) {\n                typeCache[id] = {};\n              }\n              typeCache[id][lang] = {\n                name: label.name,\n                description: label.description\n              };\n              idToLabel[id] = typeCache[id][lang]\n            });\n            resolve(idToLabel);\n          });\n        }\n      });\n    }\n  }\n});","\nApp.factory('Status', [function() {\n    return {\n        valid: {\n            name: 'Valid',\n            kind: 'success',\n            description: 'The item is valid'\n        },\n        found: {\n            name: 'Found',\n            kind: 'success',\n            description: 'An item matching the name has been found'\n        },\n        created: {\n            name: 'Created',\n            kind: 'success',\n            description: 'The item has been successfully created on the server'\n        },\n        updated: {\n            name: 'Updated',\n            kind: 'success',\n            description: 'The item has been successfully updated on the server'\n        },\n        noExactMatch: {\n            name: 'No exact match',\n            kind: 'warning',\n            description: 'One or more existing items match the names'\n        },\n        warning: {\n            name: 'Warning',\n            kind: 'warning',\n            description: 'The item should be improved'\n        },\n        notFound: {\n            name: 'Not found',\n            kind: 'alert',\n            description: 'The item does not exists on the server'\n        },\n        error: {\n            name: 'Error',\n            kind: 'alert',\n            description: 'The item is invalid'\n        },\n        missingReference: {\n            name: 'Missing reference',\n            kind: 'alert',\n            description: 'The item reference a non existing item'\n        },\n        missingDependency: {\n            name: 'Missing dependency',\n            kind: 'alert',\n            description: 'The item requires a dependency that is missing'\n        }\n    }\n}]);","App.controller('TasksCtrl', function ($scope, Tasks, $stateParams) {\n\n  if($stateParams.status) {\n    $scope.hasStatus = true;\n  }\n\n  $scope.filter = {\n    name: null,\n    page: 1,\n    limit: 5,\n    status: $stateParams.status\n  };\n\n  $scope.pageChanged = function () {\n    $scope.getItems()\n  };\n\n  Tasks.statuses().$promise.then(function(dataTypes) {\n    $scope.statuses = dataTypes;\n  });\n\n  Tasks.list().$promise.then(function(tasks) {\n    $scope.tasks = tasks;\n  });\n\n  $scope.getItems = function () {\n    Tasks.get($scope.filter).$promise.then(function (res) {\n      $scope.nbItems = res.nbItems;\n      $scope.items = res.items;\n    })\n  };\n\n  $scope.getItems();\n});\n","App.controller('ViewersCtrl', function ($scope, $stateParams, Viewers, $timeout) {\n  \n  var resource = Viewers;\n\n  $scope.filter = {\n    name: '',\n    page: 1,\n    limit: 5,\n  };\n\n  $scope.pageChanged = function () {\n    $scope.getItems()\n  };\n\n  $scope.newItem = {\n    name: '',\n    description: ''\n  };\n\n  $scope.$on('created', function (event, item) {\n    $scope.items.push(item);\n  });\n\n  $scope.$on('deleted', function (event, deletedItem) {\n    $scope.items = $scope.items.filter(function (item) {\n      return item._id !== deletedItem._id;\n    });\n  });\n\n  $scope.getItems = function () {\n    resource.get($scope.filter).$promise.then(function (res) {\n      $scope.nbItems = res.nbItems;\n      console.log($scope.nbItems);\n      $scope.items = res.items;\n    })\n  };\n\n  $scope.getItems();\n});\n","App.directive('block', function() {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      title: '=',\n      width: '=',\n      color: '=',\n      borderColor: '=',\n      collapsible: '=',\n      collapsed: '='\n    },\n    link: function (scope) {\n      //if(!scope.width) {\n      //  scope.width = 12\n      //}\n      //if(!scope.borderColor) {\n      //  scope.borderColor = '\\\"rgb(255, 255, 255)\\\"'\n      //}\n      // scope.isExpanded = true;\n      scope.toggle = function() {\n        scope.collapsed = !scope.collapsed;\n      }\n    },\n    templateUrl: 'app/components/block/view.html'\n    //compile: function(element, attrs){\n    //  if (!attrs.width) { attrs.width = 12; }\n    //  if (!attrs.borderColor) { attrs.borderColor = '\\\"rgb(255, 255, 255)\\\"'; }\n    //}\n  };\n});","App.directive('item', function(ItemConfig) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '='\n    },\n    link: function (scope) {\n      scope.languages = ['en', 'fr'];\n\n      // Build the names\n      scope.names = [];\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.name) {\n          scope.names.push({\n            lang: lang,\n            content: scope.item.name[lang],\n            isDefault: true\n          })\n        }\n      });\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.otherNames) {\n          scope.item.otherNames[lang].forEach(function (name) {\n            if(scope.item.name[lang] !== name) {\n              scope.names.push({\n                lang: lang,\n                content: name,\n                isDefault: false\n              })\n            }\n          })\n        }\n      });\n\n      // Build the categories\n      scope.categories = [];\n      scope.item.categories.forEach(function (category) {\n        scope.categories.push({\n          item: category,\n          searchText: category.name.en\n        });\n      });\n\n\n      // Build the categories\n      scope.parents = [];\n      scope.item.parents.forEach(function (parent) {\n        scope.parents.push({\n          item: parent,\n          searchText: parent.name.en\n        });\n      });\n\n      // Build the descriptions\n      scope.descriptions = [];\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.description) {\n          scope.descriptions.push({\n            lang: lang,\n            content: scope.item.description[lang],\n          })\n        }\n      });\n\n      scope.addName = function () {\n        scope.names.push({lang: '', content: '', isDefault: false})\n      };\n\n      scope.addDescription = function () {\n        scope.descriptions.push({lang: '', content: ''});\n      };\n\n      scope.addCategory = function () {\n        scope.categories.push({\n          hasFocus: true\n        })\n\n      };\n\n      scope.removeItem = function (item, kind) {\n        scope[kind].remove(item);\n      };\n\n      scope.autoComplete = function (item, kind) {\n        return ItemConfig[kind].resource.find({ name: item.searchText }).$promise.then(function (items) {\n          return items.items.map(function (item) {\n            return {\n              item: item,\n              searchText: item.name.en\n            }\n          });\n        });\n      };\n      scope.onItemSelect = function (item, model, label, category) {\n        category.item = item.item;\n        category.searchText = item.searchText;\n      };\n\n      scope.onTextClick = function ($event) {\n        $event.target.select();\n      };\n      \n      scope.toggleDefaultName = function (name, isToggled) {\n        scope.names.forEach(function (otherName) {\n          if(otherName.lang === name.lang) {\n            otherName.isDefault = false;\n          }\n        });\n        name.isDefault = isToggled;\n      };\n\n      scope.printItem = function () {\n        console.log(scope.item);\n      }\n    },\n    templateUrl: 'app/components/item/view.html'\n  };\n});\n","App.directive('pageTitle', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      label: '='\n    },\n    templateUrl: 'app/components/pageTitle/view.html'\n  };\n});\n","App.directive('textField', function($timeout) {\n  return {\n    restrict: 'E',\n    scope: {\n      value: '=',\n      updated: '=',\n      onUpdate: '=',\n      fieldName: '=',\n      placeholder: '='\n    },\n    link: function (scope) {\n      scope.sourceValue = angular.copy(scope.value);\n\n      scope.update = function () {\n        scope.updated = scope.sourceValue !== scope.value;\n        $timeout(function() {\n          scope.onUpdate(scope.fieldName, scope.value).then(function (errorMessage) {\n            scope.errorMessage = errorMessage;\n            scope.hasError = scope.errorMessage.length !== 0;\n            scope.$apply();\n          });\n        }, 100);\n      }\n    },\n    templateUrl: 'app/components/textfield/view.html'\n  };\n});\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('attributeRef', function (Names) {\n  return {\n    restrict: 'E',\n    scope: {\n      value: '='\n    },\n    templateUrl: 'app/edgevalues/attributeRef/view.html',\n    link: function (scope) {\n      if (scope.value) {\n        Names.getAttributeNames([scope.value.id], 'en').then(function (label) {\n          scope.label = label[scope.value.id];\n          scope.$apply()\n        })\n      }\n    }\n  };\n});\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('externalId', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            value: '='\n        },\n        templateUrl: 'app/edgevalues/externalId/view.html'\n    };\n});\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('itemRef', function (Names) {\n  return {\n    restrict: 'E',\n    scope: {\n      value: '='\n    },\n    templateUrl: 'app/edgevalues/itemRef/view.html',\n    link: function (scope) {\n      if (scope.value) {\n        Names.getItemNames([scope.value.id], 'en').then(function (label) {\n          scope.label = label[scope.value.id];\n          scope.$apply();\n        })\n      }\n    }\n  };\n});\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('text', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            value: '='\n        },\n        templateUrl: 'app/edgevalues/text/view.html'\n    };\n});\n","/**\n * Created by nico on 05/03/16.\n */\nApp.directive('url', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            value: '='\n        },\n        templateUrl: 'app/edgevalues/url/view.html'\n    };\n});\n","App.directive('category', function(Status) {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '=',\n            options: '=',\n            references: '='\n        },\n        templateUrl: './app/query/categories/view.html',\n        link: function (scope, element, attr) {\n            // Remove empty names\n            scope.curLang = 'en';\n            scope.setLang = function (lang) {\n                scope.curLang = lang;\n            };\n            scope.showDetails = false;\n            scope.warnings = [];\n            scope.nameError = false;\n        }\n    };\n}).directive('itemHeader', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            name: '@',\n            options: '=',\n            items: '='\n        },\n        templateUrl: './app/query/categories/view-header.html',\n        link: function (scope, element, attr) {\n        }\n    };\n});","App.filter('categoryFilter', function () {\n    return function (input) {\n\n        input.names\n    }\n})","App.directive('match', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '='\n        },\n        templateUrl: './app/query/categories/match.html',\n        link: function (scope, element, attr) {\n            // Remove empty names\n\n        }\n    };\n})","App.directive('task', function (Tasks, $interval, moment) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=',\n      update: '='\n    },\n    link: function (scope) {\n      scope.item.percentage = 0;\n      var startedAt = moment(scope.item.createdAt).unix()\n      moment.locale('en')\n      if(scope.item.status === \"Running\") {\n        $interval(function () {\n          Tasks.state({id: scope.item._id}).$promise.then(function (item) {\n            var now = moment().unix()\n            var secondToFinish = (now - startedAt) / item.percentage;\n            var ending = moment().add(secondToFinish, 's');\n            scope.item.percentage = item.percentage;\n            scope.item.doing = item.doing;\n            scope.item.status = item.status;\n            scope.item.remaining = ending.fromNow();\n            if(item.status !== \"Running\") {\n              scope.update();\n            }\n          });\n        }, 2000);\n      }\n      scope.stop = function () {\n        Tasks.stop({id: scope.item._id}, {id: scope.item._id}).$promise.then(function () {\n          scope.update();\n        })\n      };\n      scope.remove = function () {\n        Tasks.delete({id: scope.item._id}, {id: scope.item._id}).$promise.then(function () {\n          scope.update();\n        })\n      };\n    },\n    templateUrl: 'app/tasks/task/view.html'\n  };\n});\n","App.directive('taskItem', function (Tasks) {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '='\n        },\n        link: function (scope) {\n            scope.run = function() {\n                Tasks.run({taskName: scope.item.name}, {});\n            }\n        },\n        templateUrl: 'app/tasks/task-item/view.html'\n    };\n});\n","App.directive('viewer', function (Viewers) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=',\n      autoUpdate: '='\n    },\n    link: function (scope) {\n      scope.exists = '_id' in scope.item;\n      scope.nExists = !scope.exists\n      \n      scope.deleteItem = function () {\n        Viewers.delete({id: scope.item._id}).$promise.then(function (res) {\n          scope.$emit('deleted', scope.item);\n        });\n      };\n\n      scope.createItem = function () {\n        Viewers.save(scope.item).$promise.then(function (res) {\n          scope.item = angular.copy(scope.newItem);\n          scope.$emit('created', res);\n        });\n      };\n\n      if(scope.exists) {\n        scope.action = scope.deleteItem;\n        scope.actionName = 'Delete';\n        scope.title = ''\n      } else {\n        scope.action = scope.createItem;\n        scope.actionName = 'Create';\n        scope.title = 'Create new viewer'\n        scope.newItem = angular.copy(scope.item);\n      }\n\n      scope.onUpdate = function (field, newValue) {\n        return new Promise( function(resolve, reject) {\n          if(newValue.trim().length === 0) {\n            resolve(\"Field must not be empty\")\n          } else {\n            if(scope.exists) {\n              Viewers.update({id: scope.item._id}, scope.item).$promise.then(function (res) {\n                if(!res.updated) {\n                  resolve(\"Server error\")\n                } else {\n                  resolve(\"\")\n                }\n              });\n            }\n          }\n        });\n      };\n    },\n    templateUrl: 'app/viewers/item/view.html'\n  };\n});\n"],"sourceRoot":"/source/"}