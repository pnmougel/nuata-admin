{"version":3,"sources":["app.js","resources.js","config/constants.js","config/routes.js","dashboard/ctrl.js","directives/selectOnClick.js","item/ctrl.js","items/ctrl.js","menu/ctrl.js","models/BaseModel.js","models/Category.js","models/Dimension.js","models/Fact.js","models/Ooi.js","models/Unit.js","resources/Categories.js","resources/Dimensions.js","resources/Facts.js","resources/Init.js","resources/Oois.js","resources/Units.js","services/ItemConfig.js","services/status.js","updates/ctrl.js","components/block/directive.js","components/item/directive.js","components/pageTitle/directive.js","components/tag/directive.js","query/categories/directive.js","query/categories/filters.js","query/categories/match.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["var App = angular.module('nuata', [\n    'ngAnimate',\n    'ui.router',\n    'ngResource',\n    'angularMoment',\n    'ui.ace',\n    'ngMaterial',\n    'ui.bootstrap'\n]);\n\nApp.run(function ($rootScope) {\n    Array.prototype.equals = function (array) {\n        // if the other array is a falsy value, return\n        if (!array)\n            return false;\n\n        // compare lengths - can save a lot of time\n        if (this.length != array.length)\n            return false;\n\n        for (var i = 0, l=this.length; i < l; i++) {\n            // Check if we have nested arrays\n            if (this[i] instanceof Array && array[i] instanceof Array) {\n                // recurse into the nested arrays\n                if (!this[i].equals(array[i]))\n                    return false;\n            }\n            else if (this[i] != array[i]) {\n                // Warning - two different object instances will never be equal: {x:20} != {x:20}\n                return false;\n            }\n        }\n        return true;\n    };\n\n    Array.prototype.maxBy = function (f) {\n        var curValue = Number.MIN_VALUE;\n        var curItem = null;\n        this.forEach(function (item) {\n            var v = f(item);\n            if(v > curValue) {\n                curItem = item;\n                curValue = v;\n            }\n        });\n        return { item: curItem, max: curValue };\n    };\n\n    Array.prototype.minBy = function (f) {\n        var curValue = Number.MAX_VALUE;\n        var curItem = null;\n        this.forEach(function (item) {\n            var v = f(item);\n            if(v < curValue) {\n                curItem = item;\n                curValue = v;\n            }\n        });\n        return { item: curItem, min: curValue };\n    };\n\n    Array.prototype.remove = function (item) {\n        var idx = this.indexOf(item);\n        if(idx != -1) {\n            this.splice(idx, 1);\n        }\n    };\n});\n\nApp.config(function ($httpProvider) {\n    $httpProvider.defaults.useXDomain = false;\n    //delete $httpProvider.defaults.headers.common['X-Requested-With'];\n});\n","App.factory('Nuata', function($resource, ServerUrl) {\n    return $resource(ServerUrl + '/', {}, {\n        search: {\n            method: 'POST',\n            url: ServerUrl + '/data'\n        }\n    });\n});\n","\n//App.constant('ServerUrl', 'http://nuata.org:9000');\nApp.constant('ServerUrl', 'http://localhost:9000');","/**=========================================================\n * Module: config.js\n * App routes configuration\n =========================================================*/\n\nApp.config(['$stateProvider', '$locationProvider', '$urlRouterProvider',\n    function ($stateProvider, $locationProvider, $urlRouterProvider) {\n        'use strict';\n\n        // Set the following to true to enable the HTML5 Mode\n        // You may have to set <base> tag in index and a routing configuration in your server\n        //$locationProvider.html5Mode(true);\n\n        // default route\n        // $urlRouterProvider.otherwise('app/dashboard');\n        $urlRouterProvider.otherwise('app/items');\n\n        $stateProvider\n            .state('app', {\n                abstract: true,\n                url: '/app',\n                templateUrl: 'app/menu/view.html',\n                controller: 'MenuCtrl'\n            })\n            .state('app.dashboard', {\n                url: '/dashboard',\n                templateUrl: 'app/dashboard/view.html',\n                controller: 'DashboardCtrl'\n            })\n            .state('app.items', {\n                url: '/items',\n                templateUrl: 'app/items/view.html',\n                controller: 'ItemsCtrl',\n                params: { type: null }\n            })\n            .state('app.item', {\n                url: '/item',\n                templateUrl: 'app/item/view.html',\n                controller: 'ItemCtrl',\n                params: { id: null, type: null }\n            })\n            .state('app.updates', {\n                url: '/updates',\n                templateUrl: 'app/updates/view.html',\n                controller: 'UpdateCtrl',\n                params: { name: null }\n            });\n    }]);","/**\n * Created by nico on 17/11/15.\n */\n/**\n * Created by nico on 17/11/15.\n */\nApp.controller('DashboardCtrl', function ($scope, $state) {\n  $state.go('app.items', {\n    name: 'Dimensions'\n  })\n});","App.directive('selectOnClick', ['$window', function ($window) {\n  return {\n    restrict: 'A',\n    link: function (scope, element, attrs) {\n      element.on('click', function () {\n        if (!$window.getSelection().toString()) {\n          // Required for mobile Safari\n          this.setSelectionRange(0, this.value.length)\n        }\n      });\n    }\n  };\n}]);\n","App.controller('ItemCtrl', function ($scope, $stateParams, Dimensions, Oois, Units, Categories) {\n  $stateParams.name = $stateParams.name ? $stateParams.name : 'Dimensions';\n\n  $scope.name = $stateParams.name;\n\n\n\n  var resources = {\n    Dimensions: Dimensions,\n    'Objects of interest': Oois,\n    Units: Units,\n    Categories: Categories\n  };\n\n  var resource = resources[$stateParams.name];\n  \n  $scope.item = {\n    names: {},\n    descriptions: {}\n  };\n\n  $scope.languages = ['en', 'fr'];\n  $scope.curLang = 'en';\n\n  $scope.form = {\n    name: 'franc',\n    lang: 'en'\n  };\n\n  $scope.mappings = [{\n    field: 'categoryIds',\n    mapTo: 'categories',\n    label: 'Category',\n    resource: Categories\n  },{\n    field: 'parentIds',\n    mapTo: 'parents',\n    label: 'Parent',\n    resource: Dimensions\n  },{\n    field: 'unitIds',\n    mapTo: 'units',\n    label: 'Unit',\n    resource: Units\n  }];\n\n  $scope.currentPage = 1;\n  $scope.filter = {\n    name: '',\n    page: 1,\n    limit: 5,\n    expand: true\n  };\n\n  $scope.pageChanged = function () {\n    $scope.filter.start = ($scope.filter.page - 1) * ($scope.filter.limit);\n    $scope.getItems()\n  };\n\n  $scope.autoCompleteTextChange = function (field, newText) {\n    if(!newText) {\n      delete $scope.filter[field];\n      $scope.getItems();\n    }\n  };\n\n  $scope.updateFilter = function (mapping) {\n    if(mapping.selectedItem) {\n      $scope.filter[mapping.field] = mapping.selectedItem._id;\n      $scope.getItems();\n    }\n  };\n\n  $scope.autoComplete = function (field, newText, resource) {\n    return resource.find({\n      name: newText\n    }).$promise.then(function (items) {\n      return items.items;\n    });\n\n  };\n\n  $scope.getItems = function () {\n    resource.find($scope.filter).$promise.then(function (res) {\n      $scope.nbItems = res.nbItems;\n\n      var matchingItems = res.items;\n\n      var col1 = [26, 160, 75];\n      var col2 = [255, 154, 56];\n\n      var maxScore = matchingItems.maxBy(function (item) { return item._score; }).max;\n      //var minScore = matchingItems.minBy(function (item) { return item._score; }).min;\n\n      matchingItems.forEach(function (item) {\n        var ratio = 1 - (item._score / maxScore);\n        var color = [0, 1, 2].map(function (i) {\n          return Math.ceil(col1[i] - (col1[i] - col2[i]) * ratio);\n        });\n        item.color = 'rgb(' + color[0] + ',' + color[1] + ',' + color[2] + ')';\n      });\n      $scope.items = matchingItems\n    })\n  };\n\n  $scope.deleteCategory = function (item, category) {\n    console.log(\"Delete Category\");\n    console.log(item);\n    console.log(category);\n  };\n\n  $scope.clipboard = new Clipboard('.itemId');\n\n  $scope.getItems();\n});\n","App.controller('ItemsCtrl', function ($scope, $stateParams, ItemConfig) {\n  \n  $stateParams.type = $stateParams.type ? $stateParams.type : 'dimension';\n\n  $scope.type = $stateParams.type;\n\n  $scope.curConfig = ItemConfig[$scope.type];\n  $scope.dependencies = ItemConfig[$scope.type].dependencies;\n\n  var resource = ItemConfig[$scope.type].resource;\n  \n  $scope.languages = ['en', 'fr'];\n  $scope.curLang = 'en';\n\n  $scope.currentPage = 1;\n  $scope.filter = {\n    name: '',\n    page: 1,\n    limit: 5,\n    expand: true\n  };\n\n  $scope.pageChanged = function () {\n    $scope.filter.start = ($scope.filter.page - 1) * ($scope.filter.limit);\n    $scope.getItems()\n  };\n\n  $scope.autoCompleteTextChange = function (field) {\n    if(!field.searchText) {\n      delete $scope.filter[field.field];\n      $scope.getItems();\n    }\n  };\n\n  $scope.updateFilter = function (mapping) {\n    if(mapping.selectedItem) {\n      $scope.filter[mapping.field] = mapping.selectedItem._id;\n      $scope.getItems();\n    }\n  };\n\n  $scope.autoComplete = function (field) {\n    var resource = ItemConfig[field.type].resource;\n    return resource.find({ name: field.searchText }).$promise.then(function (items) {\n      return items.items;\n    });\n  };\n\n  $scope.updateItem = function (item) {\n    console.log(item);\n  };\n\n  $scope.getItems = function () {\n    resource.find($scope.filter).$promise.then(function (res) {\n      $scope.nbItems = res.nbItems;\n      $scope.items = res.items\n    })\n  };\n\n  $scope.deleteCategory = function (item, category) {\n    console.log(\"Delete Category\");\n    console.log(item);\n    console.log(category);\n  };\n\n  $scope.clipboard = new Clipboard('.itemId');\n\n  $scope.getItems();\n});\n","/**\n * Created by nico on 17/11/15.\n */\nApp.controller('MenuCtrl', function ($scope, $state) {\n  \n  $scope.menu = [{\n    label: 'Dashboard',\n    icon: 'fa fa-bar-chart',\n    state: 'app.dashboard',\n    params: {},\n    children: []\n  },{\n    label: 'Dimensions',\n    icon: 'fa fa-cube',\n    state: 'app.items',\n    params: {\n      type: 'dimension'\n    },\n    children: []\n  },{\n    label: 'Categories',\n    icon: 'fa fa-tags',\n    state: 'app.items',\n    params: {\n      type: 'category'\n    },\n    children: []\n  },{\n    label: 'Objects of interest',\n    icon: 'fa fa-bullseye',\n    state: 'app.items',\n    params: {\n      type: 'ooi'\n    },\n    children: []\n  },{\n    label: 'Units',\n    icon: 'fa fa-balance-scale',\n    state: 'app.items',\n    params: {\n      type: 'unit'\n    },\n    children: []\n  },{\n    label: 'Facts',\n    icon: 'fa fa-flask',\n    state: 'app.facts',\n    params: {},\n    children: []\n  }];\n\n  $scope.selectItem = function (item) {\n\n    $scope.menu.forEach(function (i) {\n      i.class = 'menu-item';\n    });\n    item.class = 'menu-item menu-item-selected';\n    $scope.curMenuItem = item;\n    $state.go(item.state, item.params)\n  };\n\n  $scope.selectItem($scope.menu[0]);\n\n  //$scope.backgroundImageStyle = 'background-image: url(' + Trianglify({\n  //  cell_size: 160,\n  //  variance: 0.4,\n  //  seed: '22g1b',\n  //  x_colors: ['#666666', '#233646', '#283C4C']}).png() + ');'\n  $scope.backgroundImageStyle = 'background: #233646';\n});","function BaseItem(allStatuses) {\n  this.allStatuses = allStatuses;\n  this.statuses = [];\n  this.statusesSet = {};\n}\nBaseItem.prototype.constructor = BaseItem;\n\nBaseItem.prototype.addStatus = function (status) {\n  if (!(status in this.statusesSet)) {\n    this.statusesSet[status] = true;\n    this.statuses.push(status);\n  }\n};\n\nBaseItem.prototype.removeStatus = function (status) {\n  if (status in this.statusesSet) {\n    delete this.statusesSet[status];\n    var idx = this.statuses.indexOf(status);\n    if (idx > -1) {\n      this.statuses.splice(idx, 1);\n    }\n  }\n};\n\nBaseItem.prototype.resolveDependencies = function () {\n  var hasMissingDependency = false;\n  var that = this;\n  this.dependencies.forEach(function (dependency) {\n    that[dependency.resolvedAs] = that[dependency.mapTo].map(function (item) {\n      if(!item._id) { hasMissingDependency = true; }\n      return item._id;\n    });\n  });\n  if(hasMissingDependency) {\n    this.addStatus(this.allStatuses.missingDependency)\n  }\n  return !hasMissingDependency;\n};\n\nBaseItem.prototype.resolveReferences = function (references) {\n  var that = this;\n  this.dependencies.forEach(function (dependency) {\n    if(that[dependency.field]) {\n      that[dependency.mapTo] = that[dependency.field].map(function (itemRef) {\n        var resolvedItem = itemRef;\n        var refs = dependency.mapTo === 'parents' ? references['dimensions'] : references[dependency.mapTo];\n        if (!itemRef in refs) {\n          that.addStatus(that.allStatuses.missingReference);\n        } else {\n          resolvedItem = refs[itemRef];\n        }\n        return resolvedItem;\n      })\n    }\n  });\n};\n\nBaseItem.prototype.getLang = function () {\n  if(this.names) {\n    return Object.keys(this.names);\n  } else { return []; }\n\n};\n\nBaseItem.prototype.isVisible = function (statuses) {\n  return true;\n  if('All' in statuses) {\n    return true;\n  } else if('None' in statuses) {\n    return false;\n  } else {\n    var found = false;\n    Object.keys(this.statuses).forEach( function(status) {\n      found = found || status.name in statuses.selectedStatuses;\n    });\n    return found;\n  }\n};\n\n//BaseItem.prototype.search = function () {\n//  var that = this;\n//  return new Promise( function(resolve, reject) {\n//    if(that.resolveDependencies()) {\n//      that.resource.search(that).$promise.then(function (res) {\n//        if (res.length === 1) {\n//          that._id = res[0]._id;\n//          that.addStatus(that.allStatuses.found);\n//        } else {\n//          that.resource.match(that).$promise.then(function (res) {\n//            if(res.length === 0) {\n//              that.addStatus(that.allStatuses.notFound);\n//            } else {\n//              that.addStatus(that.allStatuses.noExactMatch);\n//            }\n//            that.hits = res;\n//          });\n//        }\n//        resolve();\n//      })\n//    } else {\n//      resolve();\n//    }\n//  });\n//\n//};\n\n//BaseItem.prototype.index = function () {\n//  var that = this;\n//  return new Promise( function(resolve, reject) {\n//    if(that.resolveDependencies()) {\n//      that.resource.index(that).$promise.then(function (res) {\n//        that.addStatus(that.allStatuses.created);\n//        that._id = res._id;\n//        resolve();\n//      })\n//    } else {\n//      resolve();\n//    }\n//  });\n//};\n","\nApp.factory('Category', function(Status) {\n  function Category(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.dependencies = [];\n  }\n  Category.prototype = Object.create(BaseItem.prototype);\n\n  Category.prototype.constructor = Category;\n\n  Category.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Category(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Category.build = function (data) {\n    return new Category(data);\n  };\n\n  return Category\n});","\nApp.factory('Dimension', function(Status) {\n\n  function Dimension(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.categoryRefs = item.categories;\n    this.parentRefs = item.parents;\n\n    this.parents = [];\n    this.categories = [];\n\n    this.dependencies = [{\n      field: 'categoryRefs',\n      mapTo: 'categories',\n      resolvedAs: 'categoryIds'\n    },{\n      field: 'parentRefs',\n      mapTo: 'parents',\n      resolvedAs: 'parentIds'\n    }];\n  }\n\n  Dimension.prototype = Object.create(BaseItem.prototype);\n\n  Dimension.prototype.constructor = Dimension;\n\n  Dimension.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Dimension(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Dimension.build = function (data) {\n    return new Dimension(data);\n  };\n\n  return Dimension\n});\n\n","\nApp.factory('Fact', function(Status) {\n  function Fact(item) {\n    BaseItem.call(this, Status);\n    this.dependencies = [{\n      field: 'dimensionRefs',\n      mapTo: 'dimensions',\n      resolvedAs: 'dimensionIds'\n    },{\n      field: 'ooiRefs',\n      mapTo: 'oois',\n      resolvedAs: 'ooiIds'\n    }];\n    this.value = item.value;\n    this.valueInt = item.valueInt;\n    this.at = item.at;\n    this.dimensionRefs = item.dimensions;\n    this.ooiRefs = [item.ooi];\n  }\n  Fact.prototype = Object.create(BaseItem.prototype);\n\n  Fact.prototype.constructor = Fact;\n\n  Fact.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Fact(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Fact.build = function (data) {\n    return new Fact(data);\n  };\n\n  return Fact;\n});\n","App.factory('Ooi', function(Status) {\n  function Ooi(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.unitRefs = item.units;\n    this.ref = item.ref;\n    this.dependencies = [{\n      field: 'unitRefs',\n      mapTo: 'units',\n      resolvedAs: 'unitIds'\n    }];\n  }\n  Ooi.prototype = Object.create(BaseItem.prototype);\n\n  Ooi.prototype.constructor = Ooi;\n\n  Ooi.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Ooi(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Ooi.build = function (data) {\n    return new Ooi(data);\n  };\n\n  return Ooi\n});\n","\nApp.factory('Unit', function(Status) {\n  function Unit(item) {\n    BaseItem.call(this, Status);\n    this.names = item.names;\n    this.descriptions = item.descriptions;\n    this.ref = item.ref;\n    this.dependencies = [];\n  }\n  Unit.prototype = Object.create(BaseItem.prototype);\n\n  Unit.prototype.constructor = Unit;\n\n  Unit.buildFromQuery = function (data) {\n    if(data) {\n      return data.map(function (item) {\n        return new Unit(item);\n      })\n    } else {\n      return [];\n    }\n  };\n\n  Unit.build = function (data) {\n    return new Unit(data);\n  };\n\n  return Unit;\n});\n","\nApp.factory('Categories', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/category/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/category/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/category/match',\n      isArray: true\n    },\n    get: {\n      method: 'GET',\n      url: ServerUrl + '/category/:id'\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/category/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Dimensions', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/dimension/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Facts', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/fact/index'\n    }\n  });\n});\n\n\n","\nApp.factory('Init', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    init: {\n      method: 'POST',\n      url: ServerUrl + '/init'\n    }\n  });\n});\n\n\n","\nApp.factory('Oois', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/ooi/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('Units', function($resource, ServerUrl) {\n  return $resource(ServerUrl + '/', {}, {\n    index: {\n      method: 'POST',\n      url: ServerUrl + '/unit/index'\n    },\n    search: {\n      method: 'POST',\n      url: ServerUrl + '/unit/search',\n      isArray: true\n    },\n    match: {\n      method: 'POST',\n      url: ServerUrl + '/unit/match',\n      isArray: true\n    },\n    find: {\n      method: 'GET',\n      url: ServerUrl + '/dimension/search'\n    }\n  });\n});\n\n\n","\nApp.factory('ItemConfig', function(Dimensions, Categories, Units, Oois) {\n  return {\n    dimension: {\n      resource: Dimensions,\n      singular: 'Dimension',\n      plural: 'Dimensions',\n      dependencies: [{\n        type: 'category',\n        field: 'categoryIds',\n        label: 'Category'\n      }, {\n        type: 'dimension',\n        field: 'parentIds',\n        label: 'Parent'\n      }]\n    },\n    category: {\n      resource: Categories,\n      singular: 'Category',\n      plural: 'Categories',\n      mappings: {\n        field: 'categoryIds',\n        mapTo: 'categories'\n      }\n    },\n    unit: {\n      resource: Units,\n      singular: 'Unit',\n      plural: 'Units',\n      mappings: {\n        field: 'unitIds',\n        mapTo: 'units'\n      }\n    },\n    ooi: {\n      resource: Oois,\n      singular: 'Object of interest',\n      plural: 'Objects of interest',\n      mappings: {}\n    }\n  }\n});","\nApp.factory('Status', [function() {\n    return {\n        valid: {\n            name: 'Valid',\n            kind: 'success',\n            description: 'The item is valid'\n        },\n        found: {\n            name: 'Found',\n            kind: 'success',\n            description: 'An item matching the name has been found'\n        },\n        created: {\n            name: 'Created',\n            kind: 'success',\n            description: 'The item has been successfully created on the server'\n        },\n        updated: {\n            name: 'Updated',\n            kind: 'success',\n            description: 'The item has been successfully updated on the server'\n        },\n        noExactMatch: {\n            name: 'No exact match',\n            kind: 'warning',\n            description: 'One or more existing items match the names'\n        },\n        warning: {\n            name: 'Warning',\n            kind: 'warning',\n            description: 'The item should be improved'\n        },\n        notFound: {\n            name: 'Not found',\n            kind: 'alert',\n            description: 'The item does not exists on the server'\n        },\n        error: {\n            name: 'Error',\n            kind: 'alert',\n            description: 'The item is invalid'\n        },\n        missingReference: {\n            name: 'Missing reference',\n            kind: 'alert',\n            description: 'The item reference a non existing item'\n        },\n        missingDependency: {\n            name: 'Missing dependency',\n            kind: 'alert',\n            description: 'The item requires a dependency that is missing'\n        }\n    }\n}]);","/**\n * Created by nico on 03/08/15.\n */\n'use strict';\n\n\nApp.controller('UpdateCtrl', function ($scope, $location, Nuata, Status,\n                                    Categories, Units, Dimensions, Oois, Facts,\n                                    Category, Dimension, Unit, Ooi, Fact,\n                                    Init) {\n  $scope.showJson = false;\n  $scope.toggleShowJson = function () {\n    $scope.showJson = !$scope.showJson;\n  };\n\n  $scope.aceOptions = {\n    useWrapMode: true,\n    showGutter: true,\n    mode: 'json'\n  };\n\n  $scope.references = {};\n  $scope.queryOptions = {};\n\n  var kinds = ['categories', 'dimensions', 'units', 'oois', 'facts'];\n\n  var autoPromise = new Promise( function(resolve) { resolve() });\n\n  var indexItems = function (items, resource) {\n    var resolvedItems = items.filter(function (item) {\n      return item.resolveDependencies();\n    });\n\n    if(resolvedItems.length === 0) { return autoPromise; }\n    return resource.index(resolvedItems).$promise.then(function (responses) {\n      resolvedItems.forEach(function (item, idx) {\n        item.addStatus(Status.created);\n        item._id = responses._id[idx];\n      })\n    });\n  };\n\n  $scope.index = function () {\n    indexItems($scope.data.categories, Categories)\n        .then(function () { return indexItems($scope.data.units, Units) })\n        .then(function () { return indexItems($scope.data.dimensions, Dimensions) })\n        .then(function () { return indexItems($scope.data.oois, Oois) })\n        .then(function () { return indexItems($scope.data.facts, Facts) })\n  };\n\n  var searchExactMatch = function (item, matchingItemsObj) {\n    var matchingItems = Object.keys(matchingItemsObj).map(function (key) {\n      return matchingItemsObj[key];\n    });\n    var exactMatches = matchingItems.filter(function (matchingItem) {\n      if(item.categoryIds.equals(matchingItem.categoryIds)) {\n        return true;\n      }\n    });\n    if(exactMatches.length === 1) {\n      item._id = exactMatches[0]._id;\n      item.addStatus(Status.found);\n    }\n    return exactMatches.length !== 1\n  };\n\n  var searchItems = function (items, resource) {\n    var resolvedItems = items.filter(function (item) {\n      return item.resolveDependencies();\n    });\n    if(resolvedItems.length === 0) { return autoPromise; }\n    return resource.search(resolvedItems).$promise.then(function (responses) {\n      return new Promise( function(resolve, reject) {\n        var notFoundItems = resolvedItems.filter(function (item, idx) {\n          var res = responses[idx];\n          var nbItems = Object.keys(res).length;\n          if (nbItems === 1) {\n            item._id = res[0]._id;\n            item.addStatus(Status.found);\n            return false;\n          }\n          return searchExactMatch(item, res);\n        });\n        resolve(notFoundItems)\n      });\n    }).then(function (notFoundItems) {\n      return new Promise( function(resolve, reject) {\n          if(notFoundItems.length === 0) {\n            resolve();\n          } else {\n            resource.match(notFoundItems).$promise.then(function (responses) {\n              notFoundItems.forEach(function (item, idx) {\n                var res = responses[idx];\n                var nbItems = Object.keys(res).length;\n                if (nbItems === 0) {\n                  item.addStatus(Status.notFound);\n                } else {\n                  item.addStatus(Status.noExactMatch);\n                }\n                item.hits = res;\n              });\n              resolve();\n            });\n          }\n      });\n    });\n  };\n\n  var buildJson = function () {\n    $scope.data = {\n      categories: Category.buildFromQuery($scope.query.categories),\n      dimensions: Dimension.buildFromQuery($scope.query.dimensions),\n      units: Unit.buildFromQuery($scope.query.units),\n      oois: Ooi.buildFromQuery($scope.query.oois),\n      facts: Fact.buildFromQuery($scope.query.facts)\n    };\n\n    // Build the references dependencies\n    kinds.forEach(function (kind) {\n      $scope.references[kind] = {};\n      $scope.data[kind].forEach(function (item) {\n        $scope.references[kind][item.ref] = item;\n      });\n    });\n\n    // Resolve the references\n    kinds.forEach(function (kind) {\n      $scope.data[kind].forEach(function (item) {\n        item.resolveReferences($scope.references)\n      });\n    });\n\n    searchItems($scope.data.categories, Categories)\n        .then(function () { return searchItems($scope.data.units, Units) })\n        .then(function () { return searchItems($scope.data.dimensions, Dimensions) })\n        .then(function () { return searchItems($scope.data.oois, Oois) });\n\n    $scope.queryOptions = {\n      categories: {\n        visible: true,\n        filter: \"\",\n        selectedStatuses: {'All': true}\n      }\n    }\n  };\n\n  $scope.initDb = function () {\n    Init.init();\n  };\n\n  $scope.filterByStatus = function (status, folder) {\n    var curSelectedStatuses = $scope.queryOptions[folder].selectedStatuses;\n    if (status.name === 'All' || status.name === 'None' || 'All' in curSelectedStatuses || 'None' in curSelectedStatuses) {\n      $scope.queryOptions[folder].selectedStatuses = {};\n    }\n    if (status.name in curSelectedStatuses) {\n      delete $scope.queryOptions[folder].selectedStatuses[status.name];\n      if (!Object.keys($scope.queryOptions[folder].selectedStatuses).length) {\n        $scope.queryOptions[folder].selectedStatuses['None'] = true;\n      }\n    } else {\n      $scope.queryOptions[folder].selectedStatuses[status.name] = true;\n    }\n  };\n\n  $scope.statuses = [{\n    name: 'All',\n    kind: 'primary',\n    description: 'Show all items'\n  }, {\n    name: 'None',\n    kind: 'primary',\n    description: 'Hide all items'\n  }, Status.valid, Status.found, Status.created, Status.updated,\n    Status.noExactMatch, Status.warning,\n    Status.notFound, Status.error, Status.missingDependency];\n\n  $scope.jsonUpdated = function () {\n    $scope.query = JSON.parse($scope.rawJson);\n    if ($scope.rawJson) {\n      localStorage.setItem(\"jsonQuery\", $scope.rawJson)\n    }\n    buildJson();\n    //try {\n    //  $scope.query = JSON.parse($scope.rawJson);\n    //  if ($scope.rawJson) {\n    //    localStorage.setItem(\"jsonQuery\", $scope.rawJson)\n    //  }\n    //  buildJson();\n    //} catch (e) {\n    //  console.error(\"Invalid json\", e);\n    //}\n  };\n  $scope.rawJson = localStorage.getItem(\"jsonQuery\");\n  $scope.jsonUpdated();\n});\n","App.directive('block', function() {\n  return {\n    restrict: 'E',\n    transclude: true,\n    scope: {\n      title: '=',\n      width: '=',\n      color: '=',\n      borderColor: '='\n    },\n    templateUrl: 'app/components/block/view.html',\n    compile: function(element, attrs){\n      if (!attrs.width) { attrs.width = 12; }\n      if (!attrs.borderColor) { attrs.borderColor = '\\\"rgb(255, 255, 255)\\\"'; }\n    }\n  };\n});","App.directive('item', function(ItemConfig) {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '='\n    },\n    link: function (scope) {\n      scope.languages = ['en', 'fr'];\n\n      // Build the names\n      scope.names = [];\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.name) {\n          scope.names.push({\n            lang: lang,\n            content: scope.item.name[lang],\n            isDefault: true\n          })\n        }\n      });\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.otherNames) {\n          scope.item.otherNames[lang].forEach(function (name) {\n            if(scope.item.name[lang] !== name) {\n              scope.names.push({\n                lang: lang,\n                content: name,\n                isDefault: false\n              })\n            }\n          })\n        }\n      });\n\n      // Build the categories\n      scope.categories = [];\n      scope.item.categories.forEach(function (category) {\n        scope.categories.push({\n          item: category,\n          searchText: category.name.en\n        });\n      });\n\n      // Build the descriptions\n      scope.descriptions = [];\n      scope.languages.forEach(function (lang) {\n        if(lang in scope.item.description) {\n          scope.descriptions.push({\n            lang: lang,\n            content: scope.item.description[lang]\n          })\n        }\n      });\n\n      scope.addName = function () {\n        scope.names.push({lang: '', content: '', isDefault: false})\n      };\n      scope.removeName = function (name) {\n        if(!name.isDefault) {\n          scope.names.remove(name);\n        }\n      };\n      scope.addDescription = function () {\n        scope.descriptions.push({lang: '', content: ''});\n      };\n\n      scope.addCategory = function () {\n        scope.categories.push({})\n      };\n      scope.removeCategory = function (category) {\n        scope.categories.remove(category);\n      };\n\n      scope.autoComplete = function (foo) {\n        return ItemConfig.category.resource.find({ name: foo.searchText }).$promise.then(function (items) {\n          return items.items.map(function (item) {\n            return {\n              item: item,\n              searchText: item.name.en\n            }\n          });\n        });\n      };\n      scope.onItemSelect = function (item, model, label, category) {\n        category.item = item.item;\n        category.searchText = item.searchText;\n      }\n\n      scope.onTextClick = function ($event) {\n        $event.target.select();\n      };\n      \n      scope.toggleDefaultName = function (name, isToggled) {\n        scope.names.forEach(function (otherName) {\n          if(otherName.lang === name.lang) {\n            otherName.isDefault = false;\n          }\n        });\n        name.isDefault = isToggled;\n      };\n\n      scope.printItem = function () {\n        console.log(scope.item);\n      }\n    },\n    templateUrl: 'app/components/item/view.html'\n  };\n});\n","App.directive('pageTitle', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      label: '='\n    },\n    templateUrl: 'app/components/pageTitle/view.html'\n  };\n});\n","App.directive('tag', function() {\n  return {\n    restrict: 'E',\n    scope: {\n      item: '=',\n      category: '=',\n      label: '=',\n      icon: '=',\n      onDelete: '='\n    },\n    templateUrl: 'app/components/tag/view.html'\n  };\n});\n","App.directive('category', function(Status) {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '=',\n            options: '=',\n            references: '='\n        },\n        templateUrl: './app/query/categories/view.html',\n        link: function (scope, element, attr) {\n            // Remove empty names\n            scope.curLang = 'en';\n            scope.setLang = function (lang) {\n                scope.curLang = lang;\n            };\n            scope.showDetails = false;\n            scope.warnings = [];\n            scope.nameError = false;\n        }\n    };\n}).directive('itemHeader', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            name: '@',\n            options: '=',\n            items: '='\n        },\n        templateUrl: './app/query/categories/view-header.html',\n        link: function (scope, element, attr) {\n        }\n    };\n});","App.filter('categoryFilter', function () {\n    return function (input) {\n\n        input.names\n    }\n})","App.directive('match', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '='\n        },\n        templateUrl: './app/query/categories/match.html',\n        link: function (scope, element, attr) {\n            // Remove empty names\n\n        }\n    };\n})"],"sourceRoot":"/source/"}